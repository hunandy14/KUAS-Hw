/**********************************************************
Name : OpenRaw 2.4
Date : 2016/08/04
By   : CharlotteHonG
Final: 2016/09/25
**********************************************************/
#ifndef OPEN_RAW
#define OPEN_RAW


#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <iomanip>
#include <sstream>
#include <cmath>
#define PI 3.14159265
using namespace std;
typedef unsigned char imch;
typedef size_t imint;
typedef unsigned int unt;

namespace imr{
    class ImrSize{
    public:
        ImrSize(imint y, imint x);
        imint width;
        imint high;
    };
    class ImrCoor{
    public:
        ImrCoor(int y, int x);
        ImrCoor operator+(const ImrCoor &p);
        ImrCoor operator-(const ImrCoor &p);
        ImrCoor operator*(const ImrCoor &p);
        ImrCoor operator/(const ImrCoor &p);
        void info();
        int y;
        int x;
    };
    class ImrMask{
    public:
        ImrMask(ImrSize masksize);
        imch & operator[](const size_t __n);
        const imch & operator[](const size_t __n) const;
        imch & at2d(size_t y, size_t x);
        const imch & at2d(size_t y, size_t x) const;
        void sort(size_t len, size_t start);
        void info(string title);
    private:
        vector<imch> mask;
        ImrSize masksize;
    };
    class ImrPolar{
    public:
        ImrPolar(ImrSize size);
        imint & at2d(size_t y, size_t x);
        const imint & at2d(size_t y, size_t x) const;
        ImrCoor get_P(imint n, imint min);
        imint & operator[](const size_t __n);
        const imint & operator[](const size_t __n) const;
    private:
        imint dis;
        int ang;
        vector<imint> polar;    // 存重複幾次
        int P_limit;            // 找 P 時紀錄找到哪了
        imint P_qua;            // 總共找幾條
    };

    class imgraw {
    public:
        imgraw(ImrSize size);
        void read(string filename);
        void write(string filename);
        imch point_read(imint y, imint x);
        void point_write(imint y, imint x, imch value);
        imch & at2d(size_t y, size_t x);
        const imch & at2d(size_t y, size_t x) const;
        void resize_canvas(ImrSize size);
        imint w();
        imint h();
        void pri_htg(string title);
        void setMaskSize(ImrSize masksize);
        imch & maskVal(ImrCoor ori, ImrCoor mas, ImrCoor shi);
        const imch & maskVal(ImrCoor ori, ImrCoor mas, ImrCoor shi) const;
        ImrMask getMask(ImrCoor ori, ImrCoor shi);
        imch & operator[](const size_t __n);
        const imch & operator[](const size_t __n) const;
        imgraw operator+(const imgraw &p);
        imgraw operator+(const imch value);
        imgraw operator-(const imgraw &p);
        imgraw operator-(const imch value);
        // 新增的
        void sobel(int thr, imch value, imch bg);
        void hough(imint n, imch line_value, imch match_value);
        // vector<int> getarr_P(imint n, imint min);
        void draw_line(ImrCoor polar, imch value);

    private:
        ifstream::pos_type filesize;
        string filename;
        vector<imch> img_data;
        imint width;
        imint high;
        imch max;
        imch min;
        int htg_data[255];
        void histogram();
        void extremum();
        ImrSize masksize;
        // 新增的
    };

#include "Hough.cpp"
};



#endif